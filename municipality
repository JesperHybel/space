# script to get municipalities
library(osmdata)
library(sf)
library(sp)
library(tmap)

# Build an overpass query
m <- getbb("Denmark",featuretype="Country")
m <- opq(bbox=m,timeout=2500)
# Add data on administrative level 7 - which is municipalities
m <- add_osm_feature(m,key = 'admin_level', value = '7')
# level 4 is region
# level 10 is parish(sogn)
# see https://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative

# Make the query
dt_m <- osmdata_sf(m)
# Select data associated with multipolygons (municipalities are multipolygons)
a <- dt_m$osm_multipolygons[,c("osm_id","name")]

# Clean up by manually removing all non danish municipalities
index <- which(as.numeric(a$osm_id)>1574210)
index <- index[-length(index)]
b <- a[index,]
b <- b[c(-7,-8),]


# Clean up the names
library(stringdist)
library(rvest)

# Table of municipality names and dst-codes
url <- "https://www.dst.dk/da/Statistik/dokumentation/Times/sociale-pensioner/kom"
goo <- read_html(url)
table <- html_nodes(goo,"table")
mun_table <- goo %>%
        html_nodes("table") %>%
        .[1] %>%
        html_table(fill = TRUE)

mun_table <- mun_table[[1]]
year <- substring(mun_table[,2],7,10)
index <- which(as.numeric(year)>3000)
mun_table <- mun_table[index,]
mun_table <- mun_table[,3:4]
names<-unlist(strsplit(b$name,split=' ', fixed=TRUE))[seq(1,195,by=2)]

R <- length(b$name)
temp <- list()
temp$new <- rep("",R)
for (i in 1:R)
	{
		m <- amatch(names[i],mun_table$Tekst,maxDist=13)
		temp$new[i] <- mun_table$Tekst[m]
	}
b$name <- temp$new
set.seed(1)
b$var <- rnorm(98)
b <- b[, c(1, 2, 4, 3)]

# Does not plot right dut to problem with topology 
# test
st_is_valid(b)
# fix problem using code pointed out by user https://github.com/Nowosad
b2 <- lwgeom::st_make_valid(b)

load("commute_list")
index <- matchnames(commute_list$name,dk$name,maxdist=5)
# Spot errors manually
data.frame(dk$name[index$n],commute_list$name)
# Correct errors
	index$n[23] <- 86
	index$n[28] <- 62
	index$n[40] <- 68
	index$n[93] <- 40
	index$n[59] <- 28
	index$n[56] <- 38
data.frame(dk$name[index$n],commute_list$name)
index2 <- matchnames(dk$name,dk$name[index$n],maxdist=5)
b2$id <- commute_list$id[index2$n]
b2$order <- index2$n
dk <- b2[,c(1,2,5,6,3,4)]

st_write(dk, "dk2.shp")

